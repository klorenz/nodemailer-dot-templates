// Generated by CoffeeScript 1.9.1
(function() {
  var TemplateHandler, TemplateManager, UnresolvableData, createTemplate, doT, extend, keys, ref,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require("underscore"), keys = ref.keys, extend = ref.extend;

  UnresolvableData = (function(superClass) {
    extend1(UnresolvableData, superClass);

    function UnresolvableData(message, arg) {
      this.message = message;
      this.templateHandler = arg.templateHandler, this.options = arg.options, this.templates = arg.templates, this.templateData = arg.templateData;
      UnresolvableData.__super__.constructor.apply(this, arguments);
    }

    return UnresolvableData;

  })(Error);

  createTemplate = function(source) {
    var allowUnsafeEval, allowUnsafeNewFunction, doT, loophole, ref1;
    try {
      eval("1;");
      doT = require("dot");
      return doT.template(source);
    } catch (_error) {
      ref1 = loophole = require('loophole'), allowUnsafeNewFunction = ref1.allowUnsafeNewFunction, allowUnsafeEval = ref1.allowUnsafeEval;
      return allowUnsafeEval(function() {
        return allowUnsafeNewFunction(function() {
          doT = require("dot");
          return doT.template(source);
        });
      });
    }
  };

  doT = function(options) {
    var templater;
    templater = new TemplateManager(options);
    return function(options, done) {
      return templater.applyTemplates(options, done);
    };
  };

  TemplateManager = (function() {
    function TemplateManager(options) {
      var ref1, ref2, ref3;
      if (options == null) {
        options = {};
      }
      this.useStrictVars = (ref1 = options.useStrictVars) != null ? ref1 : false;
      this.useAllData = (ref2 = options.useAllData) != null ? ref2 : true;
      this.templateDataName = (ref3 = options.templateDataName) != null ? ref3 : 'DATA';
      this.handleUnresolvable = options.handleUnresolvable;
    }

    TemplateManager.prototype.applyTemplates = function(options, done) {
      var key, source, templateData, templates, value;
      templates = {};
      templateData = extend({}, options[this.templateDataName] || {});
      for (key in options) {
        value = options[key];
        console.log("option", key, value);
        if (typeof value !== "string") {
          continue;
        }
        if (!value.match(/\{\{/)) {
          if (this.useAllData) {
            if (!(key in templateData)) {
              templateData[key] = value;
            }
          }
        } else {
          source = value;
          if (!this.useStrictVars) {
            source = value.replace(/\{\{\w+\}\}/g, function(m) {
              return "{{=it." + m.substring(2);
            });
          }
          templates[key] = {
            source: value,
            template: createTemplate(source),
            undefCount: (value.match(/undefined/g) || []).length
          };
        }
      }
      return (new TemplateHandler(this, templates, templateData)).process(options, done);
    };

    return TemplateManager;

  })();

  TemplateHandler = (function() {
    function TemplateHandler(config, templates1, templateData1) {
      this.config = config;
      this.templates = templates1;
      this.templateData = templateData1;
    }

    TemplateHandler.prototype.rendered = function(key) {
      if (typeof this.templates[key] === "string") {
        return this.templates[key];
      } else if (typeof this.templates[key] === "function") {
        return this.templates[key].call(this, this.templateData);
      } else {
        return this.templates[key].template(this.templateData);
      }
    };

    TemplateHandler.prototype.handleTemplate = function(key) {
      var undefCount, value;
      value = this.rendered(key);
      console.log("value", value);
      if (this.config.useAllData) {
        undefCount = (value.match(/undefined/g) || []).length;
        if (undefCount === 0 || undefCount === this.templates[key].undefCount) {
          delete this.templates[key];
          this.templateData[key] = value;
          return value;
        } else {
          throw new Error("cannot resolve " + key);
        }
      } else {
        delete this.templates[key];
        return value;
      }
    };

    TemplateHandler.prototype.process = function(options, done) {
      var currentTemplateCount, e, i, j, key, len, len1, ref1, ref2;
      currentTemplateCount = keys(this.templates).length;
      debugger;
      while (keys(this.templates).length) {
        ref1 = keys(this.templates);
        for (i = 0, len = ref1.length; i < len; i++) {
          key = ref1[i];
          try {
            options[key] = this.handleTemplate(key, false);
          } catch (_error) {
            e = _error;
          }
        }
        if (currentTemplateCount === keys(this.templates).length) {
          break;
        }
        currentTemplateCount = keys(this.templates).length;
      }
      if (currentTemplateCount > 0) {
        if (this.config.handleUnresolvable === 'error') {
          return done(new UnresolvableData("Cannot resolve " + keys(this.templates).join(", "), {
            templateHandler: this,
            options: options,
            templates: this.templates,
            templateData: this.templateData
          }));
        } else if (this.config.handleUnresolvable) {
          return this.config.handleUnresolvable.call(this, options, this.templates, this.templateData, done);
        } else {
          ref2 = keys(this.templates);
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            key = ref2[j];
            options[key] = this.rendered(key);
          }
        }
      }
      return done();
    };

    return TemplateHandler;

  })();

  module.exports = {
    doT: doT
  };

}).call(this);
